Overall concepts of: Root FormGroup | FormControl For each input element | Nested FormGroups | Form Arrays

HTML Directive: formGroup | formControl | formControlName | formGroupName (used for nested FormGroups) | formArrayName
TS Class: FormGroup | FormControl | FormBuilder | Validators |
  FormGroup.setValue
  FormGroup.patchValue
  FormControl.setValidators
  FormControl.clearValidators
  FormControl.updateValueAndValidity
  const phoneControl = this.customerForm.get('phone');
  phoneControl.valueChanges.subscribe();
  phoneControl.statusChanges.subscribe();
  this.customerForm.valueChanges.subscribe(value => console.log(JSON.stringify(value)));


Topic: Reactive Form basic:
Topic: FormBuilder VS 'FormGroup | FormControl'
       Validator
       Custom Validator
Topic: Nested FormGroup:
Topic: Watching FromGroup and FromControl changes:
Topic: Form Array.
Topic: Form Reset and setControl.

##########################################################################################################
Topic: Reactive Form basic:

TS file:
export class CustomerComponent implements OnInit {
  // Root FormGroup.
  customerForm: FormGroup;                 <<<<<<< Need to match, point A
  customer = new Customer();

  ngOnInit() {
    // We selected to use ngOnInit (rather than the constructor) to ensure the component and template are initialized before building the form model.
    this.customerForm = new FormGroup({   <<<<<<< Need to match, point A
      firstName : new FormControl(),      <<<<<<< Need to match, point B
      lastName : new FormControl(),
      email : new FormControl(),
      sendCatalog : new FormControl(true)
    });
  }
  populateTestData(): void {
    // Change value for a subset of the formcontrol. Or use setValue for all values in the form
    this.customerForm.patchValue({
      firstName : 'Jack',
      lastName : 'Harkness',
      sendCatalog : false
    });
  }
}

HTML file:
<form novalidate (ngSubmit)="save()" [formGroup]="customerForm">    <<<<<<< Need to match, point A
  <div>
    <label for="firstNameId">First Name</label>
    <input id="firstNameId" type="text"
           placeholder="First Name (required)"
           formControlName="firstName" />                           <<<<<<< Need to match, point B
    <span ...>
        ...
    </span>
  </div>

  <div>
    <button class="btn btn-primary mr-3"
            type="submit"
            style="width:80px"
            [title]="customerForm.valid ? 'Save your entered data' : 'Disabled until the form data is valid'"           <<<<<<< Need to match, point A
            [disabled]="!customerForm.valid">                                                                           <<<<<<< Need to match, point A
      Save
    </button>
    <button class="btn btn-outline-secondary"
            type="button"
            (click)="populateTestData()">
      Test Data
    </button>
  </div>
</form>


Note:
1. To access From model properties to check validness:
- customerForm.controls.firstName.valid
- customerForm.get('firstName').valid

2. To set the input values in template from the TS file
this.customerForm.setValue({          <<< Set all values
  firstName: 'Jack',
  lastName: 'Harkness',
  email: 'jack@torchwood.com'
});
this.customerForm.patchValue({        <<< Set part of the values
  firstName: 'Jack',
  lastName: 'Harkness'
});
recipientGroup.get('name').setValue(shipment.to.name)
recipientGroup.get('name').patchValue(shipment.to.name)


##########################################################################################################
Topic: FormBuilder VS 'FormGroup | FormControl'
       Validator
       Custom Validator

export class CustomerComponent implements OnInit {
  // Root FormGroup.
  customerForm: FormGroup;
  customer = new Customer();

  constructor(private fb: FormBuilder) { }

  ngOnInit() {
    this.customerForm = new FormGroup({lastName : new FormControl(),});

    // The above can be replease with
    this.customerForm = this.fb.group({lastName : '',});
  }
}

Validation list:
    this.customerForm = this.fb.group({lastName : '',});
    this.customerForm = this.fb.group({lastName : {value: 'n/a', disabled: true}   });
    this.customerForm = this.fb.group({lastName : [{value: 'n/a', disabled: true}] });
    this.customerForm = this.fb.group({lastName : [''] });
    this.customerForm = this.fb.group({lastName : ['', Validators.required]  });  // the first element in the array is the default input element value
    this.customerForm = this.fb.group({lastName : ['', [Validators.required, Validators.maxLength(50)]]  });  // If you have more than one validator, use another array to group them
    // If there is a third attribute, e.g. zzz in the ['', [Validators.xxx,yyy], zzz], it is the async validators.


Customer Validator:
In TS file:
    this.customerForm = this.fb.group({
      rating: [null, ratingRange],            // set it for null because '' is not good for number
      rating2: [null, ratingRange2(1,5)],     // set it for null because '' is not good for number
    });
    function ratingRange(c: AbstractControl): {[key: string]: boolean} | null {
      if(c.value !== null && (isNaN(c.value) || c.value < 1 || c.value > 5)) {
        return{ 'range': true};
      }
      return null;
    }
    function ratingRange2(min: number, max: number): ValidatorFn {
      return (c: AbstractControl): { [key: string]: boolean } | null => {
        if (c.value !== null && (isNaN(c.value) || c.value < min || c.value > max)) {
          return {'range': true};
        }
        return null;  // null means no error.
      }
    }
In HTML:
            <span *ngIf="customerForm.get('rating').errors?.range">
              Please rate your experience from 1 to 5.
            </span>



##########################################################################################################
Topic: Nested FormGroup:

TS File:
    this.customerForm = this.fb.group({
      emailGroup: this.fb.group({                                 <<<<<<< Need to match, point A
        email : ['', [Validators.required, Validators.email]],    <<<<<<< Need to match, point B
        confirmEmail : ['', [Validators.required]]                <<<<<<< Need to match, point C
      }, { validator: emailMatcher})
    });
    function emailMatcher (c:AbstractControl): {[key: string]: boolean} | null {
      let emailControl = c.get('email');
      let confirmControl = c.get('confirmEmail');
      if (emailControl.pristine  || confirmControl.pristine) {
        return null;
      }
      if(emailControl.value === confirmControl.value) {
        return null;
      }
      return { 'match': true};
    }

HTML File:
      <div formGroupName="emailGroup">                            <<<<<<< Need to match, point A
        <div>
          <label for="emailId">Email</label>
          <input id="emailId" type="email"
                 formControlName="email"                          <<<<<<< Need to match, point B
                [ngClass]="{'is-invalid':
                    customerForm.get('emailGroup').errors ||
                    ((customerForm.get('emailGroup.email').touched || customerForm.get('emailGroup.email').dirty)
                    && !customerForm.get('emailGroup.email').valid) }" />         <<<<<<< Short form to get to email from email Form Group
        </div>

        <div>
          <label for="confirmEmailId">Confirm Email</label>
          <input id="confirmEmailId" type="email"
                 formControlName="confirmEmail"                   <<<<<<< Need to match, point C
                 [ngClass]="{'is-invalid':
                      customerForm.get('emailGroup').errors ||
                      ((customerForm.get('emailGroup.confirmEmail').touched || customerForm.get('emailGroup.confirmEmail').dirty)
                      && !customerForm.get('emailGroup.confirmEmail').valid) }" />
          <span *ngIf="customerForm.get('emailGroup.confirmEmail').errors?.required">
            Please confirm your email address.
          </span>
          <span *ngIf="customerForm.get('emailGroup').errors?.match">
            The confirmation does not match the email address.
          </span>
        </div>
      </div>

Note:
1. To access From model properties to check validness:
- customerForm.controls.emailGroup.controls.email.valid
- customerForm.get('emailGroup.email').valid


##########################################################################################################
Topic: Watching FromGroup and FromControl changes:

Example one: watching to change validation rules.
In TS File:
  ngOnInit() {
    this.customerForm.get('notification').valueChanges.subscribe(
      value => this.setNotification(value)
    );
  }
  setNotification(notifyVia: string): void {
    const phoneControl = this.customerForm.get('phone');
    if (notifyVia === 'text') {
      phoneControl.setValidators(Validators.required);
    } else {
      phoneControl.clearValidators();
    }
    phoneControl.updateValueAndValidity();
  }


In HTML File:
      <div>
        <label>Send Notifications</label>
        <div>
          <div><label>
              <input type="radio"
                     value="email"
                     formControlName="notification"> Email
          </label></div>
          <div><label>
              <input type="radio"
                     value="text"
                     formControlName="notification"> Text
          </label></div>
        </div>
      </div>

So you don't need to have:
              <input type="radio"
                     value="email"
                     formControlName="notification"
                     (click)="setNotification('email')"> Email


Another example: watching to display different error messages
In TS File:
  private validationMessages = {
    required: 'Please enter your email address.',
    email: 'Please enter a valid email address.',
  };

  ngOnInit() {
    const emailControl = this.customerForm.get('emailGroup.email');      <<<<<<< Need to match, point A
    emailControl.valueChanges.pipe(
      debounceTime(1000)
    ).subscribe(
      value => this.setMessage(emailControl)
    )
  }

  setMessage(c: AbstractControl): void {
    this.emailMessage = '';                                              <<<<<<< Need to match, point B
    if((c.touched || c.dirty) && c.errors) {
      this.emailMessage = Object.keys(c.errors).map(
        key => this.emailMessage += this.validationMessages[key]
      ).join(' ');
    }
  }

In HTML:
  <div formGroupName="emailGroup">                                       <<<<<<< Need to match, point A
    <label for="emailId">Email</label>
    <input id="emailId"
           type="email"
           placeholder="Email (required)"
           formControlName="email"                                       <<<<<<< Need to match, point A
           [ngClass]="{'is-invalid': emailMessage }" />
    <span>{{emailMessage}}</span>                                        <<<<<<< Need to match, point B
    ...
  </div>


Note:
- DebounceTime ignores all events until a specified time has passed without another event.
  For example, debounceTime(1000) waits for 1 second with no events before emitting another event.
  This is very useful for validation, especially if you don't want to show the validation messages until the user has stopped typing.
- ThrottleTime emits a value, then ignores subsequent values for a specified amount of time.
  This is useful when you receive way too many events, as when tracking mouse movements.
- DistinctUntilChanged suppresses duplicate consecutive items.
  This is useful when tracking key events to prevent getting events when only the Ctrl or Shift keys are changed.
  (good explanation in https://rxjs-dev.firebaseapp.com/api/operators/distinctUntilChanged)



##########################################################################################################
Topic: Form Array.

In TS File:
  customerForm: FormGroup;
  constructor(private fb: FormBuilder) { }

  get addresses(): FormArray{                                             <<<<<<< Need to match, point B, C
    return <FormArray>this.customerForm.get('addresses');                 <<<<<<< Need to match, point A
  }

  ngOnInit() {
    this.customerForm = this.fb.group({
      ...
      addresses: this.fb.array([ this.buildAddress() ])                   <<<<<<< Need to match, point A.    If you don't need formArray, just do: addresses: this.buildAddress()
    });
  }

  addAddress(): void {
    this.addresses.push(this.buildAddress());                             <<<<<<< Need to match, point C, D. Add the a new set of data in FormGroup
  }

  buildAddress(): FormGroup {
    return this.fb.group({
      addressType: 'home',
      street1: '',
      street2: '',
      city: '',
      state: '',
      zip: ''
    })
  }

In HTML File:
      <div *ngIf="customerForm.get('sendCatalog').value">
        <div formArrayName="addresses" *ngFor="let address of addresses.controls; let i=index">           <<<<<<< Need to match, point B
          <div [formGroupName]="i"> <!-- Start addresses group-->
            <div>
                    <input id="addressType1Id"
                           type="radio"
                           value="home"
                           formControlName="addressType"> Home
                    <input id="addressType1Id"
                           type="radio"
                           value="work"
                           formControlName="addressType"> Work
                    <input id="addressType1Id"
                           type="radio"
                           value="other"
                           formControlName="addressType"> Other
            </div>

            <div>
              <label attr.for="{{ 'street1Id' + i }}">Street Address 1</label>
              <div><input id="{{ 'street1Id' + i }}"                                                       <<<<<<< Add i into the id to make it unique.
                       type="text"
                       placeholder="Street address"
                       formControlName="street1"></div>
            </div>

            <div>
              <label attr.for="{{ 'street2Id' + i }}">Street Address 2</label>
              <div><input id="{{ 'street2Id' + i }}"
                       type="text"
                       placeholder="Street address (second line)"
                       formControlName="street2"></div>
              </div>
            </div>

            <div>
                <input class="form-control"
                       id="{{ 'cityId' + i }}"
                       type="text"
                       placeholder="City"
                       formControlName="city">
                <select class="form-control"
                        id="{{ 'stateId' + i }}"
                        formControlName="state">
                  ... multiple <option> ...
                </select>
                <input id="{{ 'zipId' + i }}"
                       type="number"
                       placeholder="Zip Code"
                       formControlName="zip">
            </div>
          </div>  <!-- End addresses group-->
        </div>

                    <button type="button"
                            [disabled]="!addresses.valid"
                            (click)="addAddress()">                       <<<<<<< Need to match, point D
                      Add Another Address
                    </button>
      </div>


Note:
1. A FormArray is simply a group of FormControls or FormGroups that are conceptualized as an array.
   Unlike a FormGroup, they are accessed by index instead of by name.
   A FormArray can contain any number of FormControls or FormGroups, but they are often used for like items, such as multiple instances of the same FormControl or FormGroup.
   Because each item in a FormArray does not need a unique name, they are great for sets that are dynamic or of unknown length.

2. Creating a FormArray
this.myArray= newFormArray([...]);
this.myArray= this.fb.array([...]);

3. Access to FormArray item:
        <div formArrayName="addresses" *ngFor="let address of addresses.controls; let i=index">
          <div [formGroupName]="i">                       --------
              <input id="{{ 'street1Id' + i }}"
                     type="text"
                     placeholder="Street address"
                     formControlName="street1">           --------
          </div>
        </div>
<br>Street: {{ addresses.get('0.street1')?.value}}        --------


##########################################################################################################
Topic: Form Reset and setControl.

In product.edit.components:
  productForm: FormGroup;

  ngOnInit(): void {
    this.productForm = this.fb.group({
      productName: ['', [Validators.required,
                        Validators.minLength(3),
                        Validators.maxLength(50)]],
      productCode: ['', Validators.required],
      starRating: ['', NumberValidators.range(1, 5)],
      tags: this.fb.array([]),
      description: ''
    });
  }


Note:
1. Reset the FormGroup:
  productForm: FormGroup;
  this.productForm.reset();

2. setControl:
    this.productForm.setControl('tags', this.fb.array(this.product.tags || []));


##########################################################################################################
If you want to create a empty FormGroup from FormBuilder, just keep the object empty:

    const form = this.formBuilder.group({
      from: this.formBuilder.control({ value: null, disabled: true }),
      to: this.formBuilder.control(null),
      items: this.formBuilder.array([this.buildItemForm(carrierMetadata, formCarrierType)]),
      features: this.formBuilder.group({})
    });

features: this.formBuilder.group({})
is the same as:
form.addControl('features', new FormGroup({}));



  shipmentForm: FormGroup = new FormGroup({
    additionalDetails: new FormGroup({
      deliveryInstructions: new FormArray([new FormControl(null), new FormControl(null), new FormControl(null)]),
      senderReferences: new FormArray([
        new FormGroup({
          reference: new FormControl('')
        }),
        new FormGroup({
          reference: new FormControl('')
        })
      ])
    })
  });


















