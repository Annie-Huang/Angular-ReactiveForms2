Overall concepts of: Root FormGroup | FormControl For each input element | Nested FormGroups | Form Arrays

HTML Directive: formGroup | formControl | formControlName | formGroupName (used for nested FormGroups) | formArrayName
TS Class: FormGroup | FormControl | FormBuilder | Validators |
  FormGroup.setValue
  FormGroup.patchValue
  FormControl.setValidators
  FormControl.clearValidators
  FormControl.updateValueAndValidity
  const phoneControl = this.customerForm.get('phone');


Topic: Reactive Form basic:
Topic: FormBuilder VS 'FormGroup | FormControl'
       Validator
       Custom Validator
Topic: Nested FormGroup:


##########################################################################################################
Topic: Reactive Form basic:

TS file:
export class CustomerComponent implements OnInit {
  // Root FormGroup.
  customerForm: FormGroup;                 <<<<<<< Need to match, point A
  customer = new Customer();

  ngOnInit() {
    // We selected to use ngOnInit (rather than the constructor) to ensure the component and template are initialized before building the form model.
    this.customerForm = new FormGroup({
      firstName : new FormControl(),      <<<<<<< Need to match, point B
      lastName : new FormControl(),
      email : new FormControl(),
      sendCatalog : new FormControl(true)
    });
  }
  populateTestData(): void {
    // Change value for a subset of the formcontrol. Or use setValue for all values in the form
    this.customerForm.patchValue({
      firstName : 'Jack',
      lastName : 'Harkness',
      sendCatalog : false
    });
  }
}

HTML file:
<form novalidate (ngSubmit)="save()" [formGroup]="customerForm">    <<<<<<< Need to match, point A
  <div>
    <label for="firstNameId">First Name</label>
    <input id="firstNameId" type="text"
           placeholder="First Name (required)"
           formControlName="firstName" />                           <<<<<<< Need to match, point B
    <span ...>
        ...
    </span>
  </div>

  <div>
    <button class="btn btn-primary mr-3"
            type="submit"
            style="width:80px"
            [title]="customerForm.valid ? 'Save your entered data' : 'Disabled until the form data is valid'"           <<<<<<< Need to match, point A
            [disabled]="!customerForm.valid">                                                                           <<<<<<< Need to match, point A
      Save
    </button>
    <button class="btn btn-outline-secondary"
            type="button"
            (click)="populateTestData()">
      Test Data
    </button>
  </div>
</form>


Note:
1. To access From model properties to check validness:
- customerForm.controls.firstName.valid
- customerForm.get('firstName').valid

2. To set the input values in template from the TS file
this.customerForm.setValue({          <<< Set all values
  firstName: 'Jack',
  lastName: 'Harkness',
  email: 'jack@torchwood.com'
});
this.customerForm.patchValue({        <<< Set part of the values
  firstName: 'Jack',
  lastName: 'Harkness'
});
recipientGroup.get('name').setValue(shipment.to.name)
recipientGroup.get('name').patchValue(shipment.to.name)


##########################################################################################################
Topic: FormBuilder VS 'FormGroup | FormControl'
       Validator
       Custom Validator

export class CustomerComponent implements OnInit {
  // Root FormGroup.
  customerForm: FormGroup;
  customer = new Customer();

  constructor(private fb: FormBuilder) { }

  ngOnInit() {
    this.customerForm = new FormGroup({lastName : new FormControl(),});

    // The above can be replease with
    this.customerForm = this.fb.group({lastName : '',});
  }
}

Validation list:
    this.customerForm = this.fb.group({lastName : '',});
    this.customerForm = this.fb.group({lastName : {value: 'n/a', disabled: true}   });
    this.customerForm = this.fb.group({lastName : [{value: 'n/a', disabled: true}] });
    this.customerForm = this.fb.group({lastName : [''] });
    this.customerForm = this.fb.group({lastName : ['', Validators.required]  });  // the first element in the array is the default input element value
    this.customerForm = this.fb.group({lastName : ['', [Validators.required, Validators.maxLength(50)]]  });  // If you have more than one validator, use another array to group them
    // If there is a third attribute, e.g. yyy in the ['', [Validators.xxx,xxx], yyy], it is the async validators.


Customer Validator:
In TS file:
    this.customerForm = this.fb.group({
      rating: [null, ratingRange],     // set it for null because '' is not good for number
      rating2: [null, ratingRange2(1,5)],     // set it for null because '' is not good for number
    });
    function ratingRange(c: AbstractControl): {[key: string]: boolean} | null {
      if(c.value !== null && (isNaN(c.value) || c.value < 1 || c.value > 5)) {
        return{ 'range': true};
      }
      return null;
    }
    function ratingRange2(min: number, max: number): ValidatorFn {
      return (c: AbstractControl): { [key: string]: boolean } | null => {
        if (c.value !== null && (isNaN(c.value) || c.value < min || c.value > max)) {
          return {'range': true};
        }
        return null;  // null means no error.
      }
    }
In HTML:
            <span *ngIf="customerForm.get('rating').errors?.range">
              Please rate your experience from 1 to 5.
            </span>



##########################################################################################################
Topic: Nested FormGroup:

TS File:
    this.customerForm = this.fb.group({
      emailGroup: this.fb.group({                                 <<<<<<< Need to match, point A
        email : ['', [Validators.required, Validators.email]],    <<<<<<< Need to match, point B
        confirmEmail : ['', [Validators.required]]                <<<<<<< Need to match, point C
      }, { validator: emailMatcher})
    });
    function emailMatcher (c:AbstractControl): {[key: string]: boolean} | null {
      let emailControl = c.get('email');
      let confirmControl = c.get('confirmEmail');
      if (emailControl.pristine  || confirmControl.pristine) {
        return null;
      }
      if(emailControl.value === confirmControl.value) {
        return null;
      }
      return { 'match': true};
    }

HTML File:
      <div formGroupName="emailGroup">                            <<<<<<< Need to match, point A
        <div>
          <label for="emailId">Email</label>
          <input id="emailId" type="email"
                 formControlName="email"                          <<<<<<< Need to match, point B
                [ngClass]="{'is-invalid':
                    customerForm.get('emailGroup').errors ||
                    ((customerForm.get('emailGroup.email').touched || customerForm.get('emailGroup.email').dirty)
                    && !customerForm.get('emailGroup.email').valid) }" />         <<<<<<< Short form to get to email from email Form Group
        </div>

        <div>
          <label for="confirmEmailId">Confirm Email</label>
          <input id="confirmEmailId" type="email"
                 formControlName="confirmEmail"                   <<<<<<< Need to match, point C
                 [ngClass]="{'is-invalid':
                      customerForm.get('emailGroup').errors ||
                      ((customerForm.get('emailGroup.confirmEmail').touched || customerForm.get('emailGroup.confirmEmail').dirty)
                      && !customerForm.get('emailGroup.confirmEmail').valid) }" />
          <span *ngIf="customerForm.get('emailGroup.confirmEmail').errors?.required">
            Please confirm your email address.
          </span>
          <span *ngIf="customerForm.get('emailGroup').errors?.match">
            The confirmation does not match the email address.
          </span>
        </div>
      </div>

Note:
1. To access From model properties to check validness:
- customerForm.controls.emailGroup.controls.email.valid
- customerForm.get('emailGroup.email').valid





















